[
{
	"uri": "http://localhost:1313/internship_report/vi/1-worklog/",
	"title": "Nhật ký công việc",
	"tags": [],
	"description": "",
	"content": "Tuần 1: Làm quen với nhóm và những điều cơ bản của AWS\nTuần 2: Phạm vi dự án trò chơi gõ phím, microservices \u0026amp; nền tảng vận hành\nTuần 3: Lab AWS, tài liệu hóa UI/UX TypeRush \u0026amp; tích hợp NoSQL cho project 1\nTuần 4: RDS, Auto Scaling, CloudWatch, Route 53, CLI, CI/CD, Docker, Serverless, Security Hub\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/4-eventparticipated/4.1-kick-off/",
	"title": "Kick-off AWS FCJ Workforce - FPTU OJT FALL 2025",
	"tags": [],
	"description": "",
	"content": "Bài thu hoạch Mục tiêu Sự kiện Xây dựng một thế hệ AWS Builders chất lượng cao cho Việt Nam. Trang bị cho sinh viên những kỹ năng thực chiến về Cloud, DevOps, AI/ML, Security, và Data \u0026amp; Analytics. Kết nối sinh viên với cộng đồng AWS Study Group hơn 47.000 thành viên và các doanh nghiệp đối tác của AWS. Diễn giả Nguyễn Gia Hưng – Trưởng bộ phận Kiến trúc sư giải pháp, AWS Vietnam Đỗ Huy Thắng – Trưởng nhóm DevOps, VNG Danh Hoàng Hiếu Nghị – Kỹ sư GenAI, Renova Bùi Hồ Linh Nhi – Kỹ sư AI, SoftwareOne Phạm Nguyễn Hải Anh – Kỹ sư Cloud, G-Asia Pacific Nguyễn Đồng Thanh Hiệp – Kỹ sư Cloud chính, G-Asia Pacific Những điểm nhấn chính Nhận diện những cạm bẫy phổ biến dẫn đến thất bại Chi tiêu cho những gì khiến bạn vui vẻ nhất thời mà bỏ qua những gì giúp bạn trở nên tốt hơn. Học một khóa học chỉ vì chức danh công việc thay vì xem đó là lợi thế cạnh tranh -\u0026gt; Sẽ không ai xem bạn là một nhân sự có giá trị. Học tập là một hành trình cả đời và không ai có thể đi đường tắt trên thang bậc tri thức. Hành trình tìm kiếm cơ hội việc làm Không ai có con đường dễ dàng khi tìm kiếm việc làm. Đó là một chặng đường dài và đầy thử thách, đòi hỏi sự chăm chỉ và khả năng nắm bắt cơ hội. What awaits me at AWS First Cloud Journey Một cách để kết nối với những người xung quanh và tìm những người bạn đồng hành cùng tôi trong AWS First Cloud Journey và thậm chí là trong cuộc sống. Rất nhiều thử thách mà tôi cần phải vượt qua để trở thành một phiên bản tốt hơn của chính mình. Những cơ hội để có kinh nghiệm thực hành nhằm nâng cao hơn nữa khả năng của mình. Bài học đúc kết Ưu tiên phát triển dài hạn hơn niềm vui ngắn hạn Thành công đòi hỏi việc đầu tư vào các kỹ năng xây dựng giá trị tương lai của bạn, không chỉ là chi tiêu cho những thú vui tạm thời. Hãy tiếp cận việc học như một cách để đạt được lợi thế cạnh tranh thực sự, thay vì chỉ để thu thập một chức danh công việc, để trở thành một chuyên gia thực sự có giá trị.\nEmbrace the Challenge as a Lifelong Journey Hãy hiểu rằng việc có được cơ hội nghề nghiệp là một quá trình khó khăn đòi hỏi sự chăm chỉ và bền bỉ. Không có con đường tắt trên thang bậc tri thức; hãy xem mọi thử thách là một bước cần thiết để trở thành một phiên bản tốt hơn của chính mình.\nTrải nghiệm tại Sự kiện Việc tham dự buổi hội thảo “Kick-off AWS First Cloud Journey” vô cùng giá trị, mang lại cho tôi một nền tảng vững chắc về các khái niệm thiết yếu, những kỹ năng thực tế để bắt đầu xây dựng, và nguồn cảm hứng để tiếp tục hành trình học tập suốt đời trên nền tảng đám mây. Các trải nghiệm chính bao gồm:\nHọc hỏi từ các diễn giả giàu chuyên môn Sự kiện đã mang đến một trải nghiệm học hỏi đa chiều, kết hợp tầm nhìn chiến lược của ngành với những lời khuyên nghề nghiệp thực tế. Chúng tôi đã được nghe tổng quan chiến lược về tương lai của đám mây từ anh Nguyễn Gia Hưng, Trưởng bộ phận Kiến trúc sư giải pháp tại AWS Việt Nam, và có được những hiểu biết sâu sắc về vai trò quan trọng của DevOps từ anh Đỗ Huy Thắng, Trưởng nhóm DevOps tại VNG. Điều này được bổ sung hoàn hảo bởi những câu chuyện gần gũi và truyền cảm hứng từ các cựu học viên của chương trình, những người đã chia sẻ hành trình cá nhân từ khi còn là sinh viên đến khi trở thành các chuyên gia trong các lĩnh vực như Kỹ sư GenAI và Kỹ sư Cloud. Việc được nghe trực tiếp về \u0026ldquo;một ngày làm việc\u0026rdquo; và quá trình chuyển đổi từ chương trình sang một công việc công nghệ toàn thời gian đã cung cấp một bức tranh rõ ràng và hữu hình về con đường phía trước.\nKết nối và thảo luận Từ lúc check-in cho đến giờ nghỉ giải lao, không khí luôn tràn đầy năng lượng. Đây là những cơ hội vô giá để kết nối với các bạn sinh viên khác, những người sẽ là đồng nghiệp và cộng tác viên của chúng tôi trong suốt chương trình Đào tạo tại Doanh nghiệp (OJT) này. Ngoài việc kết nối với bạn bè, phiên Hỏi \u0026amp; Đáp cuối chương trình là một điểm nhấn, cho phép chúng tôi tương tác trực tiếp với các diễn giả và cố vấn. Diễn đàn mở này đã tạo cơ hội để đặt những câu hỏi cụ thể về con đường sự nghiệp, thách thức kỹ thuật và phát triển cá nhân, biến dòng thông tin một chiều thành một cuộc thảo luận năng động và mang tính hợp tác.\nNhững bài học kinh nghiệm Ba bài học cốt lõi đã nổi bật sau sự kiện. Đầu tiên, điện toán đám mây là bệ phóng nền tảng cho các ngành nghề hiện đại, không chỉ là một điểm đến duy nhất; đó là cánh cổng dẫn đến các chuyên ngành về AI, DevOps, Bảo mật và Dữ liệu. Thứ hai, hành trình này là một cuộc đua marathon, không phải chạy nước rút. Những câu chuyện đa dạng từ các cựu học viên nhấn mạnh rằng chương trình này là một bước khởi đầu quan trọng, nhưng việc học hỏi liên tục và sự kiên cường mới là yếu tố định hình một sự nghiệp thành công. Cuối cùng, cộng đồng là một chất xúc tác mạnh mẽ. Sự kiện đã khẳng định rằng giờ đây chúng tôi là một phần của một hệ sinh thái lớn hơn—cộng đồng AWS Builders—nơi sự hợp tác và chia sẻ kiến thức là điều cần thiết cho sự phát triển.\nMột vài hình ảnh tại sự kiện Nhìn chung, sự kiện không chỉ cung cấp kiến thức kỹ thuật mà còn giúp tôi định hình lại tư duy về cách học và khuyến khích tôi tiếp tục nỗ lực hơn nữa.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/3-blogstranslated/3.1-blog1/",
	"title": "Blog 1",
	"tags": [],
	"description": "",
	"content": "Cách chúng tôi xây dựng một \u0026ldquo;flywheel\u0026rdquo; để cải thiện bảo mật liên tục cho Amazon RDS bởi Joshua Brindle\nBài viết này mô tả quy trình mà một nhóm bảo mật AWS đã thực hiện để bảo vệ một tính năng mới, PL/Rust, trên Amazon Relational Database Service (Amazon RDS). Tác giả (principal security engineer) giải thích cách nhóm vượt ra ngoài triển khai tối thiểu để xây dựng một hệ thống bảo mật toàn diện, tự cải thiện – một \u0026ldquo;flywheel\u0026rdquo; – kết hợp công nghệ, quy trình và kiểm thử nhằm bảo vệ khách hàng.\nCác thành phần của hệ thống Trung tâm của dự án là PL/Rust, một extension cho phép người dùng viết các hàm PostgreSQL tùy chỉnh bằng Rust, sau đó được biên dịch thành native machine code hiệu năng cao. Lõi của extension này là thư viện có tên postgrestd, được thiết kế để ngăn việc \u0026ldquo;thoát\u0026rdquo; khỏi phạm vi cơ sở dữ liệu (database escape). Tuy nhiên, tại thời điểm đó, thư viện còn mới và chưa được \u0026ldquo;harden\u0026rdquo; cho thực tế môi trường production quy mô lớn. Thách thức bảo mật chính xuất phát từ việc PL/Rust biên dịch các extension này trực tiếp trên chính database instance. Thiết kế này yêu cầu toàn bộ development toolchain phải sẵn có cục bộ, làm tăng đáng kể rủi ro tiềm ẩn. Một extension được xây kém có thể làm mất ổn định database hoặc host instance của nó, và attacker có thể dùng nhiều kỹ thuật để tìm cách vượt qua các kiểm soát bảo mật như mô hình viết hoặc loại trừ thực hiện [write xor execute] (W^X). Bối cảnh đó cho thấy cần một chuỗi các biện pháp giảm thiểu (mitigations) vững chắc để cung cấp tính năng này một cách an toàn cho khách hàng.\nThách thức cách tiếp cận Văn hóa AWS đề cao operational excellence – tập trung vào automation, resilience và simplicity – đã ảnh hưởng mạnh mẽ đến quá trình tìm giải pháp. Nhóm đã cân nhắc SELinux (Security-Enhanced Linux), được mô tả là một lựa chọn từng tranh luận lâu dài. SELinux là tập hợp các kernel features thực thi mandatory access control (MAC), bổ sung một lớp bảo vệ mạnh phía trên hệ thống authorization tiêu chuẩn. Với SELinux policies, administrator có thể đặc tả cực kỳ chi tiết những gì được phép trên hệ thống; ví dụ: ngăn một process ghi vào file ngay cả khi quyền sở hữu thông thường cho phép. Mức độ kiểm soát tất định (deterministic control) này có thể nâng cao đáng kể bảo mật của hệ điều hành. Đổi lại là giảm tính linh hoạt và nỗ lực đáng kể để cấu hình các access controls đáp ứng yêu cầu bảo mật cụ thể. Sau một cuộc tranh luận nội bộ kỹ lưỡng (senior leaders thách thức ý tưởng để dự đoán vấn đề tương lai), nhóm thống nhất rằng cho trường hợp sử dụng PL/Rust, lợi ích của SELinux vượt trội so với hạn chế. Quyết định được đưa ra để tiếp tục theo hướng này.\nXây dựng \u0026ldquo;Security Flywheel\u0026rdquo; Chỉ triển khai một công cụ là chưa đủ; nhóm đã xây dựng một quy trình hoàn chỉnh, liên tục cải tiến quanh nó.\nEnforce \u0026amp; Monitor: Xây dựng môi trường SELinux và tạo policies để \u0026ldquo;lock down\u0026rdquo; hệ thống. Điểm then chốt: cấu hình các policy gửi mọi tin nhắn từ chối (denial messages) đến hệ thống telemetry nội bộ để phân tích. Respond: Phối hợp với internal blue team, họ phát triển các incident response playbooks cụ thể cho đội Amazon RDS điều tra các denial messages này. Test \u0026amp; Refine: Bắt đầu chạy hàng quý các \u0026ldquo;game days\u0026rdquo;. Trong các bài diễn tập này, red team dàn dựng exploit nhắm vào hệ thống, và service team phản hồi bằng playbook. Sau đó tất cả các đội phân tích phản hồi để tìm bottlenecks và vùng cần cải thiện. Chu trình enforcement → monitoring → response → testing tạo nên một cỗ máy bảo mật nhịp nhàng, chắc chắn.\nFlywheel vận hành: Ví dụ thực tế Hiệu quả của hệ thống được kiểm chứng trong môi trường production. Một SELinux denial message tự động tạo một ticket mức độ nghiêm trọng cao cho service team. Hệ thống hoạt động đúng kỳ vọng: chặn thành công một hoạt động không được phép, đóng vai trò như một proactive intrusion detection system. Dù rủi ro tức thời đã bị vô hiệu hóa, quy trình của nhóm yêu cầu phải điều tra root cause để xem hệ thống còn cải thiện được không. Cuộc điều tra cuối cùng cho thấy hoạt động được khởi xướng bởi nhóm nghiên cứu tại Varonis Threat Labs. Đội bảo mật AWS sau đó liên hệ để hợp tác, minh họa cách một security event có thể dẫn tới tương tác tích cực với cộng đồng nghiên cứu. Sự cố này cung cấp một ví dụ cụ thể và đáng giá về việc công việc chủ động của nhóm đã trực tiếp mang lại lợi ích cho khách hàng.\nĐối với các security engineers tham gia, đây là sự xác nhận sâu sắc vì nó đưa ra ví dụ cụ thể về cách nỗ lực chủ động của họ đã ngăn ngừa một vấn đề tiềm ẩn, mang lại lợi ích trực tiếp cho khách hàng.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/3-blogstranslated/3.2-blog2/",
	"title": "Blog 2",
	"tags": [],
	"description": "",
	"content": "Tạo kết nối SSL tới Amazon RDS for Db2 trong Java không cần KeyStore hoặc Keytool bởi Vikram Khatri, Amine Yahsine, Ashish Saraswat, and Sumit Kumar\nBài viết này trình bày một phương pháp đơn giản hóa để thiết lập kết nối cơ sở dữ liệu bảo mật SSL trong Java dành cho Amazon Relational Database Service (Amazon RDS) for Db2. Cách tiếp cận này cho phép developer bỏ qua độ phức tạp truyền thống liên quan tới tiện ích keytool và việc quản lý Java KeyStore (JKS). Lợi ích chính: đơn giản, phù hợp môi trường tự động hóa như CI/CD pipelines, và vẫn duy trì bảo mật mạnh thông qua thương lượng TLS 1.2 đúng chuẩn và xác thực chứng chỉ máy chủ.\nTổng quan giải pháp Thay vì dựa vào một Java TrustStore truyền thống, giải pháp này tận dụng một thuộc tính cấu hình đặc thù do IBM JDBC Driver hỗ trợ. Driver có thể được chỉ định dùng trực tiếp chứng chỉ máy chủ định dạng PEM, loại bỏ nhu cầu chuyển đổi hoặc import vào file .jks.\nĐiều này được thực hiện bằng cách thiết lập thuộc tính sslCertLocation:\nproperties.put(\u0026#34;sslCertLocation\u0026#34;, \u0026#34;/path/to/certchain.pem\u0026#34;); Để đảm bảo kết nối được mã hóa và dùng giao thức an toàn, cần đặt thêm các thuộc tính kết nối JDBC driver sau:\nsslConnection=true sslVersion=TLSv1.2 Phương pháp này đặc biệt phù hợp môi trường đám mây như AWS, nơi Amazon RDS cung cấp một bundle chứng chỉ định dạng PEM. Giải pháp đã được kiểm thử với IBM Db2 JDBC Driver (db2jcc4.jar v4.33.31), Java 11+, và chứng chỉ PEM từ Amazon RDS.\nĐiều kiện tiên quyết Trước khi triển khai, giả định bạn đã có:\nMột instance Amazon RDS for Db2 với SSL đã bật. File chuỗi chứng chỉ PEM (ví dụ: us-east-1-bundle.pem theo vùng, tải từ AWS). Phiên bản mới của IBM Data Server Driver (db2jcc4.jar phiên bản 4.33 hoặc mới hơn). Java 8 hoặc cao hơn, hỗ trợ TLS 1.2. Chương trình Java Mã nguồn đầy đủ của chương trình Java (Db2SSLTest.java) kết nối tới Amazon RDS for Db2 bằng phương pháp SSL này:\nimport java.sql.*; import java.util.Properties; public class Db2SSLTest { public static void main(String[] args) { if (args.length != 6) { System.out.println(\u0026#34;Usage: java Db2SSLTest \u0026#34; + \u0026#34; \u0026lt;certchain.pem\u0026gt; \u0026#34; + \u0026#34; \u0026lt;hostname\u0026gt; \u0026lt;port\u0026gt; \u0026lt;database\u0026gt; \u0026lt;userid\u0026gt; \u0026lt;password\u0026gt;\u0026#34;); System.exit(1); } Properties properties = new Properties(); String certPath = args[0]; String hostname = args[1]; String port = args[2]; String database = args[3]; String userid = args[4]; String password = args[5]; properties.put(\u0026#34;sslConnection\u0026#34;, \u0026#34;true\u0026#34;); properties.put(\u0026#34;sslVersion\u0026#34;, \u0026#34;TLSv1.2\u0026#34;); properties.put(\u0026#34;sslCertLocation\u0026#34;, certPath); properties.put(\u0026#34;user\u0026#34;, userid); properties.put(\u0026#34;password\u0026#34;, password); String url = \u0026#34;jdbc:db2://\u0026#34; + hostname + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; + database; try { Class.forName(\u0026#34;com.ibm.db2.jcc.DB2Driver\u0026#34;); Connection conn = DriverManager.getConnection(url, properties); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(\u0026#34;SELECT CURRENT \u0026#34; + \u0026#34; TIMESTAMP \u0026#34; + \u0026#34; FROM SYSIBM.SYSDUMMY1\u0026#34;); if (rs.next()) { System.out.println(\u0026#34;SSL Connection successful!\u0026#34;); System.out.println(\u0026#34;Current timestamp: \u0026#34; + rs.getString(1)); } rs.close(); stmt.close(); conn.close(); } catch (Exception e) { System.err.println(\u0026#34;Error: \u0026#34; + e.getMessage()); e.printStackTrace(); } } } Biên dịch và chạy Giả sử IBM JDBC driver nằm tại ~/sqllib/java/db2jcc4.jar, script shell dưới đây minh họa cách biên dịch và chạy chương trình Java. Script cũng có hàm lấy mật khẩu DB từ AWS Secrets Manager hoặc nhắc người dùng nhập tay.\n#!/usr/bin/env bash # Retrieves the master user password for a specified DB instance. # This function attempts to obtain the master user password for the provided # DB instance ID. It first checks if the password can be retrieved from the # AWS Secrets Manager. If a valid secret is not found, it prompts the user # to manually enter the password. # # Args: # DB_INSTANCE_ID (str): The database instance identifier. # # Environment Variables: # REGION: The AWS region where the DB instance is located. # # Exports: # MASTER_USER_PASSWORD: The retrieved or entered master user password. # # Returns: # int: Returns 1 if the password retrieval fails, otherwise 0. get_master_password() { DB_INSTANCE_ID=$1 SECRET_ARN=$(aws rds describe-db-instances \\ --db-instance-identifier \u0026#34;$DB_INSTANCE_ID\u0026#34; \\ --region $REGION \\ --query \u0026#34;DBInstances[0].MasterUserSecret.SecretArn\u0026#34; \\ --output text) if [[ -z \u0026#34;$SECRET_ARN\u0026#34; || \u0026#34;$SECRET_ARN\u0026#34; == \u0026#34;None\u0026#34; ]]; then read -rsp \u0026#34;Enter Master User password: \u0026#34; MASTER_USER_PASSWORD echo else SECRET_JSON=$(aws secretsmanager get-secret-value \\ --secret-id \u0026#34;$SECRET_ARN\u0026#34; \\ --query \u0026#34;SecretString\u0026#34; \\ --region $REGION \\ --output text) MASTER_USER_PASSWORD=$(jq -r \u0026#39;.password\u0026#39; \u0026lt;\u0026lt;\u0026lt; \u0026#34;$SECRET_JSON\u0026#34;) if [[ -z \u0026#34;$MASTER_USER_PASSWORD\u0026#34; ]]; then echo \u0026#34;Failed to get password from secret manager \u0026#39;$SECRET_ARN\u0026#39;. Exiting...\u0026#34; return 1 fi export MASTER_USER_PASSWORD=$MASTER_USER_PASSWORD fi } # Retrieves the master user name for a specified DB instance. # # This function queries AWS RDS to obtain the master user name for the provided # DB instance identifier. If the master user name is not found, it returns an # error message. # # Environment Variables: # DB_INSTANCE_IDENTIFIER: The database instance identifier. # REGION: The AWS region where the DB instance is located. # # Exports: # MASTER_USER_NAME: The retrieved master user name. # # Returns: # int: Returns 1 if the master user name is not found, otherwise 0. get_master_user_name() { local master_user_name=($(aws rds describe-db-instances \\ --db-instance-identifier \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34; \\ --region $REGION \\ --query \u0026#34;DBInstances[0].MasterUsername\u0026#34; \\ --output text)) if [ \u0026#34;$master_user_name\u0026#34; = \u0026#34;None\u0026#34; ]; then echo \u0026#34;Not found\u0026#34; return 1 else export MASTER_USER_NAME=$master_user_name fi } # Retrieves the database address for a specified DB instance. # # This function queries AWS RDS to obtain the database endpoint address for the # provided DB instance identifier. If the address is not found, it returns an # error message. # # Environment Variables: # DB_INSTANCE_IDENTIFIER: The database instance identifier. # REGION: The AWS region where the DB instance is located. # # Exports: # DB_ADDRESS: The retrieved database endpoint address. # # Returns: # int: Returns 1 if the database address is not found, otherwise 0. get_db_address() { local db_address=($(aws rds describe-db-instances \\ --db-instance-identifier \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34; \\ --region $REGION \\ --query \u0026#34;DBInstances[0].Endpoint.Address\u0026#34; \\ --output text)) if [ -z \u0026#34;$db_address\u0026#34; ]; then echo \u0026#34;Not found\u0026#34; return 1 else export DB_ADDRESS=$db_address fi } # Retrieves the SSL port number for a specified DB instance. # # This function queries AWS RDS to obtain the parameter group name associated # with the provided DB instance identifier, and then queries the parameter # group to obtain the SSL port number. If the SSL port is not found, it returns # an error message. # # Environment Variables: # DB_INSTANCE_IDENTIFIER: The database instance identifier. # REGION: The AWS region where the DB instance is located. # # Exports: # SSL_PORT: The retrieved SSL port number. # # Returns: # int: Returns 1 if the SSL port is not found, otherwise 0. get_ssl_port() { SSL_PORT=\u0026#34;\u0026#34; DB_PARAM_GROUP_NAME=$(aws rds describe-db-instances \\ --db-instance-identifier \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34; \\ --region $REGION \\ --query \u0026#34;DBInstances[0].DBParameterGroups[0].DBParameterGroupName\u0026#34; \\ --output text) if [ \u0026#34;$DB_PARAM_GROUP_NAME\u0026#34; != \u0026#34;\u0026#34; ]; then SSL_PORT=$(aws rds describe-db-parameters \\ --db-parameter-group-name \u0026#34;$DB_PARAM_GROUP_NAME\u0026#34; \\ --region $REGION \\ --query \u0026#34;Parameters[?ParameterName==\u0026#39;ssl_svcename\u0026#39;].ParameterValue\u0026#34; \\ --output text) if [ \u0026#34;$SSL_PORT\u0026#34; = \u0026#34;None\u0026#34; ]; then SSL_PORT=\u0026#34;\u0026#34; return 1 fi fi export SSL_PORT=$SSL_PORT return 0 } # Main entry point for the script. # # This function compiles a Java program, downloads the SSL certificate, retrieves # the master user name, master password, database address, and SSL port from AWS # RDS, and then runs the Java program with the retrieved parameters. # # Exports: # None # # Returns: # int: Returns 0 if the program runs successfully, otherwise 1. main () { DB_INSTANCE_IDENTIFIER=\u0026#34;viz-demo\u0026#34; CL_PATH=.:$HOME/sqllib/java/db2jcc4.jar REGION=\u0026#34;us-east-1\u0026#34; PROG_NAME=Db2SSLTest JAVA_FILE=${PROG_NAME}.java DBNAME=\u0026#34;TEST\u0026#34; if ! command -v javac \u0026amp;\u0026gt;/dev/null; then echo \u0026#34;javac is not installed. Please install Java Development Kit (JDK) to compile Java programs.\u0026#34; exit 1 fi echo \u0026#34;Compile Java program $JAVA_FILE\u0026#34; javac -cp $CL_PATH $JAVA_FILE echo \u0026#34;Downloading SSL certificate...\u0026#34; CERTCHAIN=\u0026#34;/home/db2inst1/us-east-1-bundle.pem\u0026#34; if [ -f \u0026#34;$CERTCHAIN\u0026#34; ]; then echo \u0026#34;Certificate already exists. Skipping download.\u0026#34; else echo \u0026#34;Certificate does not exist. Downloading...\u0026#34; if ! curl -sL \u0026#34;https://truststore.pki.rds.amazonaws.com/us-east-1/$REGION-bundle.pem\u0026#34; -o $REGION-bundle.pem; then echo \u0026#34;Failed to download SSL certificate. Please check your network connection or the URL.\u0026#34; exit 1 fi fi if get_master_user_name \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34;; then echo \u0026#34;Master user name: $MASTER_USER_NAME\u0026#34; USER=\u0026#34;$MASTER_USER_NAME\u0026#34; else echo \u0026#34;Failed to retrieve master user name. Exiting...\u0026#34; exit 1 fi if get_master_password \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34;; then PASSWORD=$MASTER_USER_PASSWORD else echo \u0026#34;Failed to retrieve master password. Exiting...\u0026#34; exit 1 fi if get_db_address \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34;; then echo \u0026#34;DB Address: $DB_ADDRESS\u0026#34; HOST=\u0026#34;$DB_ADDRESS\u0026#34; else echo \u0026#34;Failed to retrieve DB address. Exiting...\u0026#34; exit 1 fi if get_ssl_port \u0026#34;$DB_INSTANCE_IDENTIFIER\u0026#34;; then echo \u0026#34;SSL Port: $SSL_PORT\u0026#34; PORT=\u0026#34;$SSL_PORT\u0026#34; else echo \u0026#34;Failed to retrieve SSL port. Exiting...\u0026#34; exit 1 fi # Use -Djavax.net.debug=ssl:handshake:verbose to debug SSL issues echo \u0026#34;Running Java program...\u0026#34; java \\ -cp \u0026#34;$CL_PATH\u0026#34; $PROG_NAME $CERTCHAIN $HOST $PORT $DBNAME $USER $PASSWORD } main \u0026#34;$@\u0026#34; Lưu ý Hiện có một hạn chế trong JDBC driver (tại thời điểm viết) ngăn việc sử dụng global certificate bundle (như global-bundle.pem) với thuộc tính sslCertLocation. Nếu ứng dụng chỉ kết nối một AWS Region, nên dùng file chứng chỉ theo vùng (ví dụ: us-east-1-bundle.pem). Nếu bắt buộc phải dùng global bundle, developer cần quay lại phương pháp truyền thống với keytool để lưu chứng chỉ vào keystore.\nXử lý sự cố Một số vấn đề thường gặp và cách xử lý:\nFailing SSL connection: Sau khi bật SSL trên instance RDS for Db2, cần khởi động lại instance; việc bật chỉ có hiệu lực sau restart. Không tìm thấy db2jcc4.jar: File nằm trong các gói IBM DB2 client khác nhau (data server client / runtime client). Không kết nối được RDS database: Nếu lỗi sau khi catalog database với SSL qua lệnh db2cli, có thể còn kết nối cũ chưa nhận metadata mới. Chạy db2 terminate để đóng kết nối rồi thử lại. Kết luận Bài viết cho thấy không phải lúc nào cũng cần Java KeyStore hoặc tiện ích keytool để bật kết nối SSL. Với chứng chỉ PEM và JDBC driver hiện đại, có thể thiết lập kết nối bảo mật với cấu hình tối thiểu. Cách tiếp cận này đặc biệt giá trị cho developer cần thử nghiệm SSL nhanh, môi trường tự động như CI/CD và container, hoặc bất kỳ ai muốn đơn giản hóa kết nối bảo mật Java → Db2.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/3-blogstranslated/3.3-blog3/",
	"title": "Blog 3",
	"tags": [],
	"description": "",
	"content": "Nâng cao trải nghiệm kiểm thử cục bộ cho các ứng dụng serverless với LocalStack by Patrick Galvin and Debasis Rath\nBài viết này giới thiệu và giải thích các khả năng mới được thiết kế để đơn giản hóa trải nghiệm kiểm thử cục bộ cho ứng dụng serverless. Thông qua tích hợp với AWS Partner, LocalStack, AWS Toolkit for Visual Studio Code nay cung cấp một cách tinh gọn hơn để developer build, test và debug ứng dụng serverless mà không phải rời môi trường phát triển.\nThách thức với phát triển Local Serverless Mặc dù kiến trúc serverless nhìn chung đơn giản trong vận hành và mở rộng, quá trình phát triển và kiểm thử có thể tạo ra ma sát làm chậm vòng lặp code–test–debug. Developer thường gặp một số trở ngại phổ biến:\nSlow Iteration from Cloud-Based Validation: Trước đây phải deploy các template AWS Serverless Application Model (AWS SAM) lên cloud chỉ để test thay đổi, làm chậm đáng kể vòng phản hồi. Friction from Tool Context Switching: Việc phải chuyển đổi liên tục giữa IDE, CLI và các resource emulator như LocalStack dẫn đến quy trình phân mảnh, kém hiệu quả. Complex Manual Setup: Cấu hình thủ công port mapping và sửa code để chạy integration test cục bộ có thể tạo ra sai khác giữa môi trường local và cloud. Limited Service Integration Debugging: Việc khắc phục sự cố Lambda tương tác với dịch vụ AWS khác (như DynamoDB hoặc Amazon SQS) truyền thống đòi hỏi cấu hình thủ công phức tạp, kéo dài thời gian xử lý lỗi. Quy trình thiết lập tự động Extension LocalStack cho VS Code có thể cài trực tiếp từ AWS Toolkit, cung cấp một wizard thông minh cho quy trình thiết lập tinh gọn. Wizard tự phát hiện LocalStack đã được cấu hình chưa và hướng dẫn người dùng qua các bước. Nó cũng xử lý authentication bằng luồng duyệt web và lưu trữ token an toàn. Thêm nữa, wizard kiểm tra và tạo các AWS CLI profile cần thiết cho LocalStack, giúp developer dễ dàng chuyển đổi giữa môi trường local và cloud.\nKiểm thử một ứng dụng serverless Bài viết minh họa các khả năng này qua ví dụ thực tế: hệ thống xử lý đơn hàng event-driven dùng API Gateway, Amazon SQS, Lambda và Amazon Simple Notification Service (Amazon SNS).\nVới tích hợp mới, toàn bộ workflow có thể được kiểm thử cục bộ:\nDeploy Locally: Ứng dụng AWS SAM được deploy vào môi trường LocalStack local qua LocalStack AWS profile. Debug Locally: Developer đặt breakpoint trong mã Lambda trực tiếp trong VS Code và dùng debugger tích hợp để step qua thực thi khi nó tương tác với các dịch vụ giả lập cục bộ khác. Validate End-to-End: Hoàn chỉnh workflow, từ ingestion message tại API Gateway tới notification cuối cùng từ Amazon SNS, có thể test để xác nhận mọi integration hoạt động đúng trước khi deploy lên cloud. Để biết thông tin kỹ thuật chi tiết về tích hợp LocalStack này, hãy tham khảo video trên youtube này.\nBest Practices cho kiểm thử cục bộ Để tận dụng tối đa workflow mới, bài viết khuyến nghị cách tiếp cận phân lớp và chiến lược. Bắt đầu với unit test nhanh, độc lập để xác nhận core logic, rồi mở rộng dần sang integration và system-level validation.\nChiến lược kiểm thử đề xuất gồm bốn bước chính:\nBắt đầu với unit test cục bộ tập trung vào logic hàm độc lập. Chuyển sang integration test cục bộ dùng LocalStack để xác nhận tương tác giữa các dịch vụ AWS. Sau khi validation cục bộ xong, kiểm thử trong môi trường AWS thật để lộ các vấn đề không thể giả lập (ví dụ: sai lệch IAM permissions hoặc thách thức networking VPC). Cuối cùng, thực hiện performance \u0026amp; load test trên AWS để đánh giá ứng dụng xử lý traffic thực tế. Khi nào dùng kiểm thử cục bộ so với trên cloud Mặc dù kiểm thử cục bộ mang lại lợi thế về tốc độ và chi phí, cần hiểu giới hạn và biết khi nào phải test trên cloud. Bảng sau liệt kê các kịch bản sử dụng tiềm năng cho mỗi chiến lược.\nTesting Scenario Local Testing Cloud Testing Reason Function logic validation ✓ Fast feedback for core business logic Service integration testing ✓ Quick validation of AWS service interactions Rapid iteration during development ✓ Immediate feedback without deployment overhead Cost-sensitive development environments ✓ Minimizes cloud resource costs during development Offline development scenarios ✓ No internet connectivity required Performance and scalability testing ✓ Requires actual AWS infrastructure for accurate results IAM permission validation ✓ LocalStack doesn\u0026rsquo;t fully replicate IAM behavior VPC networking scenarios ✓ Network configurations can\u0026rsquo;t be accurately emulated Production-like load testing ✓ Real performance metrics only available in AWS Final validation before deployment ✓ Supports compatibility with actual AWS environment Kết luận Việc tích hợp LocalStack vào AWS Toolkit for VS Code nâng cao đáng kể trải nghiệm phát triển cục bộ cho ứng dụng serverless. Bằng cách cho phép developer chạy và debug các ứng dụng đa dịch vụ phức tạp ngay trong IDE, khả năng mới này giúp giảm chuyển ngữ cảnh, phát hiện lỗi sớm hơn và hạ chi phí phát triển. Điều này dẫn tới chu kỳ kiểm thử nhanh hơn và triển khai chất lượng cao hơn, đồng thời vẫn giữ developer kiểm soát đầy đủ môi trường cục bộ.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.4-s3-onprem/5.4.1-prepare/",
	"title": "Chuẩn bị tài nguyên",
	"tags": [],
	"description": "",
	"content": "Để chuẩn bị cho phần này của workshop, bạn sẽ cần phải:\nTriển khai CloudFormation stack Sửa đổi bảng định tuyến VPC. Các thành phần này hoạt động cùng nhau để mô phỏng DNS forwarding và name resolution.\nTriển khai CloudFormation stack Mẫu CloudFormation sẽ tạo các dịch vụ bổ sung để hỗ trợ mô phỏng môi trường truyền thống:\nMột Route 53 Private Hosted Zone lưu trữ các bản ghi Bí danh (Alias records) cho điểm cuối PrivateLink S3 Một Route 53 Inbound Resolver endpoint cho phép \u0026ldquo;VPC Cloud\u0026rdquo; giải quyết các yêu cầu resolve DNS gửi đến Private Hosted Zone Một Route 53 Outbound Resolver endpoint cho phép \u0026ldquo;VPC On-prem\u0026rdquo; chuyển tiếp các yêu cầu DNS cho S3 sang \u0026ldquo;VPC Cloud\u0026rdquo; Click link sau để mở AWS CloudFormation console. Mẫu yêu cầu sẽ được tải sẵn vào menu. Chấp nhận tất cả mặc định và nhấp vào Tạo stack. Có thể mất vài phút để triển khai stack hoàn tất. Bạn có thể tiếp tục với bước tiếp theo mà không cần đợi quá trình triển khai kết thúc.\nCập nhật bảng định tuyến private on-premise Workshop này sử dụng StrongSwan VPN chạy trên EC2 instance để mô phỏng khả năng kết nối giữa trung tâm dữ liệu truyền thống và môi trường cloud AWS. Hầu hết các thành phần bắt buộc đều được cung cấp trước khi bạn bắt đầu. Để hoàn tất cấu hình VPN, bạn sẽ sửa đổi bảng định tuyến \u0026ldquo;VPC on-prem\u0026rdquo; để hướng lưu lượng đến cloud đi qua StrongSwan VPN instance.\nMở Amazon EC2 console\nChọn instance tên infra-vpngw-test. Từ Details tab, copy Instance ID và paste vào text editor của bạn để sử dụng ở những bước tiếp theo\nĐi đến VPC menu bằng cách gõ \u0026ldquo;VPC\u0026rdquo; vào Search box\nClick vào Route Tables, chọn RT Private On-prem route table, chọn Routes tab, và click Edit Routes.\nClick Add route. Destination: CIDR block của Cloud VPC Target: ID của infra-vpngw-test instance (bạn đã lưu lại ở bước trên) Click Save changes "
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.1-workshop-overview/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về VPC Endpoint Điểm cuối VPC (endpoint) là thiết bị ảo. Chúng là các thành phần VPC có thể mở rộng theo chiều ngang, dự phòng và có tính sẵn sàng cao. Chúng cho phép giao tiếp giữa tài nguyên điện toán của bạn và dịch vụ AWS mà không gây ra rủi ro về tính sẵn sàng. Tài nguyên điện toán đang chạy trong VPC có thể truy cập Amazon S3 bằng cách sử dụng điểm cuối Gateway. Interface Endpoint PrivateLink có thể được sử dụng bởi tài nguyên chạy trong VPC hoặc tại TTDL. Tổng quan về workshop Trong workshop này, bạn sẽ sử dụng hai VPC.\n\u0026ldquo;VPC Cloud\u0026rdquo; dành cho các tài nguyên cloud như Gateway endpoint và EC2 instance để kiểm tra. \u0026ldquo;VPC On-Prem\u0026rdquo; mô phỏng môi trường truyền thống như nhà máy hoặc trung tâm dữ liệu của công ty. Một EC2 Instance chạy phần mềm StrongSwan VPN đã được triển khai trong \u0026ldquo;VPC On-prem\u0026rdquo; và được cấu hình tự động để thiết lập đường hầm VPN Site-to-Site với AWS Transit Gateway. VPN này mô phỏng kết nối từ một vị trí tại TTDL (on-prem) với AWS cloud. Để giảm thiểu chi phí, chỉ một phiên bản VPN được cung cấp để hỗ trợ workshop này. Khi lập kế hoạch kết nối VPN cho production workloads của bạn, AWS khuyên bạn nên sử dụng nhiều thiết bị VPN để có tính sẵn sàng cao. "
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.3-s3-vpc/5.3.1-create-gwe/",
	"title": "Tạo một Gateway Endpoint",
	"tags": [],
	"description": "",
	"content": " Mở Amazon VPC console Trong thanh điều hướng, chọn Endpoints, click Create Endpoint: Bạn sẽ thấy 6 điểm cuối VPC hiện có hỗ trợ AWS Systems Manager (SSM). Các điểm cuối này được Mẫu CloudFormation triển khai tự động cho workshop này.\nTrong Create endpoint console: Đặt tên cho endpoint: s3-gwe Trong service category, chọn aws services Trong Services, gõ \u0026ldquo;s3\u0026rdquo; trong hộp tìm kiếm và chọn dịch vụ với loại gateway Đối với VPC, chọn VPC Cloud từ drop-down menu. Đối với Route tables, chọn bảng định tuyến mà đã liên kết với 2 subnets (lưu ý: đây không phải là bảng định tuyến chính cho VPC mà là bảng định tuyến thứ hai do CloudFormation tạo). Đối với Policy, để tùy chọn mặc định là Full access để cho phép toàn quyền truy cập vào dịch vụ. Bạn sẽ triển khai VPC endpoint policy trong phần sau để chứng minh việc hạn chế quyền truy cập vào S3 bucket dựa trên các policies. Không thêm tag vào VPC endpoint. Click Create endpoint, click x sau khi nhận được thông báo tạo thành công. "
},
{
	"uri": "http://localhost:1313/internship_report/vi/1-worklog/1.1-week1/",
	"title": "Worklog Tuần 1",
	"tags": [],
	"description": "",
	"content": "Mục tiêu tuần 1: Kết nối, làm quen với các thành viên trong First Cloud Journey. Học cách viết worklog và xử lý workshop Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc thực hiện trong tuần: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 09/08/2025 09/08/2025 Nội quy: https://policies.fcjuni.com/ 3 - Tìm hiểu AWS và các loại dịch vụ (cho các project tương lai) + Compute + Storage + Networking + Database + \u0026hellip; - Học cách viết workshop qua video và hướng dẫn 09/09/2025 09/09/2025 Về AWS: https://cloudjourney.awsstudygroup.com/ Về workshop: https://van-hoang-kha.github.io/vi/ 4 - Sử dụng kiến thức học được từ ngày trước đó về workshop để viết worklog - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thử nghiệm: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 09/10/2025 09/10/2025 Git workshop của tôi: https://github.com/isntbim/internship_report AWS Console: https://aws.amazon.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + Lưu trữ + Khởi chạy thử EC2 instance - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 EC2 console: https://ap-southeast-1.console.aws.amazon.com/ec2/ Cơ bản về Amazon EC2: https://www.coursera.org/learn/aws-amazon-ec2-basics/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 EC2 console: https://ap-southeast-1.console.aws.amazon.com/ec2/ Kết quả đạt được tuần 1: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với workshop và viết worklogs.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Tìm hiểu các khái niệm cơ bản về EC2:\nKiểu instance: Cân bằng giữa chi phí và hiệu suất. AMI: Mẫu được cấu hình sẵn để khởi chạy instance. EBS: Lưu trữ block bền vững cho instance. Lưu trữ: Các loại tùy chọn lưu trữ cho các trường hợp sử dụng khác nhau. Elastic IP: Địa chỉ IP tĩnh cho điện toán đám mây động. "
},
{
	"uri": "http://localhost:1313/internship_report/vi/1-worklog/1.2-week2/",
	"title": "Worklog Tuần 2",
	"tags": [],
	"description": "",
	"content": "Mục tiêu tuần 2: Xác định và giới hạn phạm vi dự án trò chơi gõ phím đầu tiên (các tính năng cốt lõi, ranh giới microservice, định hướng matchmaking sau này). Thiết lập nền tảng làm việc nhóm: kho mã chung, backlog ban đầu, sơ đồ ER, tech stack, phân quyền sở hữu. Chuẩn hoá công thức tính WPM và độ chính xác. Prototype dịch vụ FastAPI: sinh văn bản, ghép câu, chat; xác thực hướng tích hợp Bedrock. Thiết lập AWS Budgets với cảnh báo. Nắm vững mức cơ bản: Lambda (function URL), VPC (subnet, gateway, peering vs transit), Flow Logs, khái niệm load balancing. Cấp phát Amazon RDS; thiết kế schema và seed dữ liệu phục vụ truy xuất văn bản. Refactor TextService sang truy xuất qua DB; benchmark so với phương pháp API trước đó. Giới thiệu thực hành vận hành sớm: phân vai, benchmarking, định hướng khả năng mở rộng. Các công việc thực hiện trong tuần: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Tổ chức phiên brainstorming để xác định và ưu tiên hoá các khái niệm cho dự án đầu tiên + Chuyển ghi chú brainstorming từ project canvas vào backlog nhiệm vụ ban đầu trên bảng quản lý + Nghiên cứu và ghi lại chi tiết thuật toán tính WPM và độ chính xác để thống nhất + Tạo kho mã chung và thiết lập cấu trúc dự án cơ bản cho các ngôn ngữ và microservice đã chọn + Tinh chỉnh sơ đồ ER phác thảo và bắt đầu phác thảo schema CSDL ban đầu + Phân công chính thức trách nhiệm lead cho từng microservice để tối ưu hoá phát triển 09/15/2025 09/15/2025 3 - Thiết lập AWS Budgets: + Rà soát các loại budget (Cost, Usage, RI, \u0026hellip;) + Xác định ngưỡng chi phí hằng tháng + Cấu hình budget trong AWS Console + Thiết lập cảnh báo email/SNS - Tạo web app dùng AWS Lambda: + Học fundamentals Lambda và function URL + Viết hàm \u0026quot;Hello World\u0026quot; đơn giản + Cấu hình hàm và IAM role + Kích hoạt và kiểm thử endpoint function URL - Học và thử FastAPI cho microservice: + Theo tutorial chính thức FastAPI + Thiết lập môi trường dev local + Tạo proof-of-concept API + Implement và test endpoint cơ bản qua Swagger UI 09/16/2025 09/16/2025 AWS Lambda: https://ap-southeast-1.console.aws.amazon.com/lambda AWS Budgets: https://us-east-1.console.aws.amazon.com/costmanagement/ FastAPI: https://www.coursera.org/learn/packt-mastering-rest-apis-with-fastapi-1xeea/ 4 - Khám phá nền tảng Networking và Security AWS: + Ôn khái niệm Amazon VPC như một khu vực cô lập trong AWS Cloud + Hiểu mục đích subnet, phân biệt public vs private subnet để cấu trúc mạng + Nắm vai trò Internet Gateway (truy cập internet cho public subnet) và NAT Gateway (cho private subnet ra internet an toàn) + Khám phá VPC Flow Logs để giám sát / troubleshoot traffic nội bộ + So sánh kết nối on-prem: Site-to-Site VPN vs Direct Connect + Hiểu use case VPC Peering so với Transit Gateway + Nắm mục tiêu tổng quát Elastic Load Balancing (phân phối traffic nâng cao tính sẵn sàng) 09/17/2025 09/17/2025 Module 02-(01 to 03): https://www.youtube.com/watch?v=O9Ac_vGHquM https://www.youtube.com/watch?v=BPuD1l2hEQ4 https://www.youtube.com/watch?v=CXU8D3kyxIc 5 - Khám phá Amazon Bedrock playground: + Rà soát các foundation model (Claude, Titan, \u0026hellip;) + Chọn model cho text generation + Thử nghiệm prompt và tham số khác nhau + Sinh và phân tích mẫu phản hồi - Prototype microservice được chỉ định: + Cấu trúc logic dịch vụ và tích hợp nhiều API sinh văn bản + Implement hàm lõi tạo câu ngẫu nhiên và quản lý chat + Rà soát bản build đầu để xác định hạn chế và phác thảo bước cải tiến tiếp theo + Xác thực hướng kỹ thuật đã chọn 09/18/2025 09/18/2025 Amazon Bedrock:https://ap-southeast-1.console.aws.amazon.com/bedrock 6 - Khởi tạo và cấu hình Amazon RDS: + Rà soát và chọn engine phù hợp nhu cầu dự án + Cấu hình thiết lập lõi: credentials, VPC, security group rules + Khởi tạo DB, theo dõi tạo xong và lưu an toàn endpoint kết nối - Prototype TextService dùng Database: + Thiết kế schema đơn giản (bảng words, sentences) lưu nội dung văn bản + Tạo script một lần để seed dataset ban đầu vào RDS + Refactor TextService để lấy dữ liệu từ DB thay vì API ngoài và benchmark cải thiện hiệu năng + Chạy benchmark đơn giản so sánh thời gian phản hồi giữa phương pháp API cũ và truy vấn DB mới 09/19/2025 09/19/2025 Aurora and RDS: https://ap-southeast-1.console.aws.amazon.com/rds Kết quả đạt được tuần 2: Xác định phạm vi trò chơi gõ phím đầu tiên:\nTính năng cốt lõi Ranh giới microservice Backlog khởi tạo Phân quyền sở hữu Đã nghiên cứu và chuẩn hoá công thức WPM và độ chính xác.\nKhởi tạo repository chung với cấu trúc đa ngôn ngữ nền tảng.\nTinh chỉnh sơ đồ ER và phác thảo schema quan hệ ban đầu.\nHoàn thành prototype FastAPI (sinh văn bản, ghép câu, chat) và xác thực qua Swagger UI.\nThiết lập AWS Budgets với ngưỡng tháng và cảnh báo.\nNắm các nền tảng AWS cốt lõi:\nLambda (function URL) VPC (subnet, IGW, NAT, Flow Logs) Peering vs Transit Gateway Khái niệm Load Balancing Khám phá model Amazon Bedrock; xác thực model ứng viên và chiến lược prompt.\nKhởi tạo phiên bản RDS, tạo schema, nạp seed dataset.\nRefactor TextService sang truy xuất DB với cải thiện hiệu năng ban đầu (benchmark).\nGiới thiệu thực hành vận hành sớm: phân quyền sở hữu, tập trung benchmarking, cân nhắc khả năng mở rộng.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/1-worklog/1.3-week3/",
	"title": "Worklog Tuần 3",
	"tags": [],
	"description": "",
	"content": "Mục tiêu tuần 3: Hoàn thành các bài lab AWS cơ bản (Site-to-Site VPN, EC2 fundamentals). Tiến hành và hoàn thành tất cả bốn module của khóa học AWS Cloud Technical Essentials. Tăng cường sử dụng thực tế AWS Console và CLI (cấu hình, quản lý key, khám phá region/service). Cộng tác với team product/design để review và tài liệu hóa Figma UI/UX cho TypeRush. Đánh giá các lựa chọn lưu trữ và quyết định phương pháp NoSQL có thể mở rộng cho dữ liệu TextService. Tạo prototype và tích hợp MongoDB (thiết lập môi trường, seeding, refactor service, validation). Xây dựng nhịp độ giao tiếp hiệu quả với các thành viên First Cloud Journey. Các công việc thực hiện trong tuần: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Lab 03: AWS Site-to-Site VPN: + Tạo môi trường Site-to-Site VPN hoàn chỉnh, bao gồm VPC mới, EC2 instance làm customer gateway, Virtual Private Gateway và kết nối VPN. + Cấu hình và kiểm tra kết nối VPN tunnel. - Lab 04: Amazon EC2 Fundamentals: + Khởi chạy và kết nối đến cả Microsoft Windows Server và Amazon Linux EC2 instances. + Deploy ứng dụng \u0026ldquo;AWS User Management\u0026rdquo; mẫu trên cả môi trường Windows và Linux để thực hành các thao tác CRUD cơ bản. + Khám phá các tính năng EC2 cốt lõi như sửa đổi instance types, quản lý EBS snapshots và tạo custom AMIs. 22/09/2025 22/09/2025 VPN Lab (Lab 03): https://000003.awsstudygroup.com/ EC2 Lab (Lab 04): https://000004.awsstudygroup.com/ 3 - Bắt đầu với khóa học AWS Cloud Technical Essentials, bao gồm 2 modules: + Module 1: Cloud Foundations \u0026amp; IAM - Định nghĩa cloud computing và giá trị đề xuất. - Phân biệt giữa on-premises và cloud workloads. - Tạo AWS account và xem xét các phương thức tương tác với AWS services. - Mô tả AWS Global Infrastructure, bao gồm Regions và Availability Zones. - Học và áp dụng best practices cho AWS Identity and Access Management (IAM). + Module 2: Compute \u0026amp; Networking - Xem xét các thành phần cơ bản của kiến trúc Amazon EC2. - Phân biệt giữa containers và virtual machines. - Khám phá các tính năng và lợi thế của serverless technologies. - Học các khái niệm networking cơ bản và tính năng của Amazon Virtual Private Cloud (VPC). - Tạo một VPC. 23/09/2025 23/09/2025 AWS Cloud Technical Essentials: https://www.coursera.org/learn/aws-cloud-technical-essentials 4 - Cộng tác và Tài liệu hóa Figma Design cho TypeRush UI/UX: + Tham gia cuộc họp design review đa chức năng để kiểm tra toàn diện các Figma mockups mới nhất từ UI/UX team. + Phân tích có hệ thống từng màn hình chính (đăng nhập/đăng ký, giao diện game chính, tóm tắt điểm sau game, menu cài đặt) để nắm bắt visual hierarchy, component states và user interactions dự định. + Biên soạn danh sách các câu hỏi về tính khả thi kỹ thuật ban đầu và cân nhắc UI implementation để tạo điều kiện thảo luận và căn chỉnh giữa design và engineering. + Bắt đầu dịch các design elements chính thành yêu cầu front-end component sơ bộ hoặc user stories, đặt nền móng cho các development sprints tương lai. - Thảo luận Text Service Storage với Team Lead \u0026amp; Xác nhận lựa chọn NoSQL: + Tham gia thảo luận tập trung với team leader về giải pháp database tối ưu cho TextService (lưu trữ từ và câu). + Trình bày ưu nhược điểm của các lựa chọn relational (SQL) vs non-relational (NoSQL) trong bối cảnh cấu trúc dữ liệu và access patterns dự kiến. + Xác nhận quyết định tiến hành với NoSQL database do tính linh hoạt và khả năng mở rộng cho text content. 24/09/2025 24/09/2025 5 - Tích hợp và Kiểm thử MongoDB với TextService Prototype: + Thiết lập MongoDB Environment: Thiết lập local instance bằng Docker. + Refactor Data Seeding Script: Sửa đổi population script để insert từ và câu vào MongoDB collections dưới dạng documents. + Viết lại Service Logic: Cập nhật TextService data retrieval methods để query MongoDB collections thay vì nguồn dữ liệu trước đó. + Xác minh Integration: Kiểm thử kỹ lưỡng refactored service để xác nhận có thể kết nối, ghi và đọc từ MongoDB database thành công. 25/09/2025 25/09/2025 6 - Hoàn thành khóa học AWS Cloud Technical Essentials, với 2 modules cuối: + Module 3: Storage \u0026amp; Databases - Phân biệt giữa các mô hình file, block và object storage. - Giải thích các khái niệm Amazon S3 cốt lõi như buckets và objects, sau đó tạo S3 bucket. - Mô tả chức năng và use cases của Amazon EBS với EC2. - Khám phá các database services khác nhau trên AWS. - Hiểu chức năng của Amazon DynamoDB và tạo DynamoDB table. + Module 4: Monitoring \u0026amp; High Availability - Định nghĩa lợi ích của monitoring và vai trò của Amazon CloudWatch. - Hiểu cách tối ưu hóa solutions cho performance và cost trên AWS. - Mô tả chức năng của Elastic Load Balancing (ELB) để route và distribute traffic. - Phân biệt giữa vertical scaling (scaling up) và horizontal scaling (scaling out). - Cấu hình solution cho high availability. 26/09/2025 26/09/2025 AWS Cloud Technical Essentials: https://www.coursera.org/learn/aws-cloud-technical-essentials Kết quả đạt được tuần 3: AWS Infrastructure Labs:\nXây dựng Site-to-Site VPN hoàn chỉnh (VPC, customer gateway EC2, virtual private gateway, xác thực tunnel) Thực hiện EC2 fundamentals (Windows \u0026amp; Linux instances, deploy CRUD app, snapshots, custom AMIs) Hoàn thành khóa AWS Cloud Technical Essentials (Foundations/IAM, Compute \u0026amp; Networking, Storage \u0026amp; Databases, Monitoring \u0026amp; High Availability).\nThành thạo AWS Console \u0026amp; CLI:\nThiết lập tài khoản, quản lý credential \u0026amp; config Khám phá region \u0026amp; service Xử lý key pair và quy trình kiểm tra tài nguyên Tài liệu hóa TypeRush UI/UX:\nPhân tích các màn hình Figma (đăng nhập, game, tóm tắt điểm, cài đặt) và luồng điều hướng Ghi lại component states \u0026amp; các câu hỏi về tính khả thi Soạn thảo user stories / yêu cầu component ban đầu Kiến trúc TextService Storage:\nĐánh giá sự đánh đổi SQL vs NoSQL cho việc lưu trữ từ/câu Chọn phương pháp NoSQL cho tính linh hoạt \u0026amp; khả năng mở rộng MongoDB Integration Prototype:\nMôi trường MongoDB local được đóng gói bằng Docker Chuyển đổi seeding script để insert documents Refactor service data layer để query MongoDB Xác thực các thao tác đọc/ghi end-to-end "
},
{
	"uri": "http://localhost:1313/internship_report/vi/1-worklog/1.4-week4/",
	"title": "Worklog Tuần 4",
	"tags": [],
	"description": "",
	"content": "Mục tiêu tuần 4: Học cách cấu hình cơ sở dữ liệu Amazon RDS với thiết lập VPC, security groups và thao tác backup. Nghiên cứu triển khai ứng dụng web có khả năng mở rộng bằng Auto Scaling Groups và Application Load Balancers. Hiểu các kỹ thuật giám sát với CloudWatch metrics, logs, alarms và dashboards. Khám phá giải pháp DNS lai (Hybrid) bằng Route 53 Resolver cho mạng doanh nghiệp. Phát triển kỹ năng AWS CLI để quản lý tài nguyên tự động trên S3, EC2, VPC và IAM. Thực hành xây dựng pipeline CI/CD với CodeCommit, CodeBuild, CodeDeploy và CodePipeline. Triển khai chiến lược backup tự động bằng AWS Backup với lifecycle policies. Học triển khai ứng dụng container hoá với Docker trên AWS và container registries. Nghiên cứu quy trình migrate VM bao gồm thao tác import/export giữa các môi trường. Xây dựng ứng dụng serverless bằng AWS Lambda và API Gateway với cấu hình IAM. Hiểu giám sát bảo mật bằng AWS Security Hub với tích hợp đa dịch vụ. Các công việc thực hiện trong tuần: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Cấu hình và quản trị cơ sở dữ liệu quan hệ với Amazon RDS: + Tạo VPC, security groups cho EC2 và RDS, và DB subnet group + Khởi tạo EC2 instance và tạo RDS database instance + Triển khai ứng dụng mẫu trên EC2 instance để kết nối tới RDS database + Thực hiện các thao tác backup và restore cho RDS instance + Thực hành resource cleanup bằng cách xoá các tài nguyên đã tạo - Triển khai và cấu hình ứng dụng web có khả năng mở rộng bằng Auto Scaling: + Thiết lập hạ tầng mạng cần thiết, bao gồm VPC, subnets và security groups + Tạo EC2 Launch Template để định nghĩa cấu hình cho các instance mới + Cấu hình Target Group và Application Load Balancer để quản lý và phân phối lưu lượng vào + Tạo và cấu hình Auto Scaling Group để tự động quản lý số lượng EC2 instances + Kiểm thử các phương án scaling bao gồm manual, scheduled và dynamic scaling policies + Dọn dẹp toàn bộ AWS resources đã tạo để tránh phát sinh chi phí - Giám sát và phân tích tài nguyên AWS với CloudWatch: + Khám phá và phân tích metrics từ các dịch vụ AWS bằng search và math expressions + Điều tra và truy vấn log data bằng CloudWatch Logs Insights + Tạo Metric Filter để trích xuất dữ liệu từ log events phục vụ giám sát + Cấu hình CloudWatch Alarm để kích hoạt thông báo dựa trên ngưỡng metric xác định + Xây dựng CloudWatch Dashboard tuỳ biến để trực quan hoá các metrics và alarms + Dọn dẹp toàn bộ tài nguyên đã tạo, bao gồm alarms và dashboards 29/09/2025 29/09/2025 Amazon RDS: https://000005.awsstudygroup.com/ Auto Scaling Group: https://000006.awsstudygroup.com/ CloudWatch Metrics https://000008.awsstudygroup.com/ 3 - Triển khai giải pháp DNS lai (Hybrid) với Route 53 Resolver: + Chuẩn bị môi trường lab bằng cách triển khai hạ tầng nền tảng với CloudFormation template + Triển khai Microsoft Active Directory để mô phỏng DNS server on-premises + Tạo Route 53 Resolver outbound endpoint để chuyển tiếp truy vấn DNS từ VPC + Cấu hình Route 53 Resolver rules để điều hướng truy vấn DNS đến resolver phù hợp + Thiết lập Route 53 Resolver inbound endpoint để mạng on-premises có thể truy vấn tài nguyên VPC + Kiểm thử phân giải tên DNS hybrid và dọn dẹp toàn bộ tài nguyên đã triển khai - Quản lý dịch vụ AWS bằng Command Line Interface (CLI): + Cài đặt và cấu hình AWS CLI với access key, secret key và default region + Luyện tập sử dụng CLI để xem và mô tả tài nguyên ở các dịch vụ như S3, SNS và IAM + Thực hiện các thao tác Amazon S3 như tạo bucket và quản lý objects qua dòng lệnh + Tạo và quản lý các thành phần VPC, bao gồm Internet Gateway, bằng các lệnh CLI + Khởi tạo, mô tả và huỷ Amazon EC2 instance hoàn toàn bằng dòng lệnh + Dọn dẹp toàn bộ tài nguyên tạo trong lab để tránh chi phí 30/09/2025 30/09/2025 Route 53 Resolver: https://cloudjourney.awsstudygroup.com/ AWS CLI: https://000011.awsstudygroup.com/ 4 - Xây dựng pipeline CI/CD để tự động hoá triển khai ứng dụng: + Tạo kho mã nguồn (version control repository) bằng AWS CodeCommit để lưu source code ứng dụng + Cấu hình build project với AWS CodeBuild để compile, test và package ứng dụng + Thiết lập application và deployment group trong AWS CodeDeploy để quản lý quá trình triển khai + Tạo pipeline CI/CD hợp nhất với AWS CodePipeline để điều phối toàn bộ quy trình + Kiểm thử end-to-end pipeline bằng cách đẩy một thay đổi mã và xác minh triển khai tự động + Dọn dẹp toàn bộ tài nguyên AWS tạo trong lab để tránh chi phí không cần thiết - Tự động hoá backup EC2 instance với AWS Backup: + Triển khai hạ tầng cần thiết, bao gồm VPC mới và EC2 instance, bằng CloudFormation template + Tạo backup plan trong AWS Backup để định nghĩa tần suất, retention policies và lifecycle rules + Cấu hình thông báo để nhận alert về trạng thái các backup jobs + Kiểm thử quy trình backup và restore để bảo đảm có thể phục hồi dữ liệu + Dọn dẹp toàn bộ tài nguyên, bao gồm CloudFormation stack và các bản backup đã tạo 01/10/2025 01/10/2025 AWS IAM Identity Center: https://000012.awsstudygroup.com/ AWS Backup: https://000013.awsstudygroup.com/ 5 - Triển khai ứng dụng Dockerized trên AWS: + Cấu hình hạ tầng AWS cần thiết, bao gồm VPC, security groups và IAM roles + Khởi tạo Amazon RDS instance để làm database cho ứng dụng + Thiết lập EC2 instance và cài đặt các phụ thuộc cần thiết để chạy ứng dụng + Triển khai và kiểm thử ứng dụng trên EC2 instance bằng Docker image + Triển khai lại ứng dụng bằng Docker Compose để quản lý nhiều containers + Push Docker image lên container registry như Amazon ECR hoặc Docker Hub + Dọn dẹp toàn bộ tài nguyên AWS đã tạo để tránh phát sinh chi phí - Migrate Virtual Machine đến và từ AWS: + Export một virtual machine từ môi trường on-premises + Tải image virtual machine đã export lên Amazon S3 bucket + Import virtual machine từ S3 vào AWS để tạo Amazon Machine Image (AMI) mới + Khởi tạo EC2 instance mới từ AMI đã import + Export một EC2 instance hiện có trở lại S3 bucket + Dọn dẹp toàn bộ tài nguyên đã tạo, bao gồm S3 bucket và EC2 instance 02/10/2025 02/10/2025 Docker on AWS: https://000015.awsstudygroup.com/ VM Import/Export: https://000014.awsstudygroup.com/ 6 - Triển khai ứng dụng serverless với Lambda và API Gateway: + Chuẩn bị và zip gói triển khai (deployment package) cho Lambda, bảo đảm bao gồm source code của function và mọi dependencies cần thiết + Định nghĩa và tạo IAM role với execution permissions cần thiết và trust policy cho phép Lambda assume role + Tạo Lambda function trên AWS Console, chỉ định runtime và upload gói triển khai đã zip + Xây dựng HTTP API endpoint bằng Amazon API Gateway và cấu hình integration để gọi Lambda function + Triển khai API Gateway ra một stage và kiểm thử end-to-end ứng dụng serverless qua URL công khai + Dọn dẹp toàn bộ tài nguyên liên quan, bao gồm API Gateway, Lambda function và IAM role để tránh chi phí - Tổng hợp và ưu tiên các phát hiện bảo mật với AWS Security Hub: + Kích hoạt AWS Security Hub để bắt đầu tổng hợp dữ liệu bảo mật từ nhiều dịch vụ AWS + Xem dashboard tích hợp để trực quan hoá các cảnh báo và phát hiện bảo mật + Tổ chức và ưu tiên các phát hiện từ các dịch vụ như Amazon GuardDuty, Inspector và Macie + Khám phá các rủi ro được tóm tắt qua các biểu đồ và bảng tương tác 03/10/2025 03/10/2025 AWS Lambda: https://000016.awsstudygroup.com/ AWS Security Hub: https://000018.awsstudygroup.com/ Kết quả đạt được tuần 4: Đã cấu hình và quản trị thành công Amazon RDS databases:\nThiết lập VPC với cấu hình security groups Tạo DB subnet group và tích hợp EC2-RDS Triển khai ứng dụng với kết nối database Thực hiện backup và restore operations Đã triển khai ứng dụng web có khả năng mở rộng bằng hạ tầng Auto Scaling:\nThiết lập hạ tầng mạng với VPC, subnets và security groups Cấu hình EC2 Launch Template cho chuẩn hoá instances Triển khai Application Load Balancer và Target Group Cấu hình Auto Scaling Group với scaling policies Đã triển khai giám sát toàn diện với CloudWatch services:\nKhám phá metrics với search và math expressions Phân tích log data bằng CloudWatch Logs Insights Cấu hình alarms tuỳ chỉnh với ngưỡng thông báo Xây dựng dashboard tương tác để trực quan hoá Đã cấu hình giải pháp DNS lai với Route 53 Resolver:\nTriển khai hạ tầng bằng CloudFormation Tích hợp Microsoft Active Directory để mô phỏng Cấu hình outbound và inbound endpoints Kiểm thử phân giải tên 2 chiều Đã phát triển kỹ năng AWS CLI cho quản lý tài nguyên tự động:\nCài đặt và cấu hình CLI với thông tin truy cập Quản lý đa dịch vụ (S3, SNS, IAM) Thao tác S3 gồm quản lý bucket và object Quản lý vòng đời EC2 instance qua CLI Đã xây dựng pipeline CI/CD tự động bằng các dịch vụ AWS:\nThiết lập repository với AWS CodeCommit Cấu hình build project bằng AWS CodeBuild Tự động hoá triển khai bằng AWS CodeDeploy Điều phối end-to-end với CodePipeline Đã triển khai chiến lược backup tự động với AWS Backup:\nTriển khai hạ tầng bằng CloudFormation templates Tạo backup plan với lifecycle policies Cấu hình thông báo giám sát backup jobs Kiểm thử khôi phục qua quy trình backup Đã triển khai ứng dụng container hoá bằng Docker trên AWS:\nCấu hình hạ tầng AWS gồm VPC và IAM roles Tích hợp RDS cho ứng dụng containerized Triển khai và kiểm thử Docker image trên EC2 Vận hành container registry với Amazon ECR Đã hoàn tất quy trình migrate VM giữa các môi trường:\nExport virtual machine từ hệ thống on-premises Lưu trữ và truyền image qua S3 Import VM để tạo AMI Khởi tạo EC2 từ images đã import Đã xây dựng ứng dụng serverless bằng AWS Lambda và API Gateway:\nChuẩn bị và cấu hình deployment package cho Lambda Tạo IAM role với execution permissions Triển khai function và cấu hình runtime Tạo endpoint API Gateway và tích hợp Lambda Đã cấu hình giám sát bảo mật tập trung với AWS Security Hub:\nKích hoạt Security Hub để gom dữ liệu đa dịch vụ Sử dụng dashboard để trực quan cảnh báo Tổ chức findings từ GuardDuty, Inspector, Macie Phân tích rủi ro qua biểu đồ và bảng tương tác "
},
{
	"uri": "http://localhost:1313/internship_report/vi/1-worklog/1.5-week5/",
	"title": "Worklog Tuần 5",
	"tags": [],
	"description": "",
	"content": "Mục tiêu tuần 5: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc thực hiện trong tuần: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 5: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "IAM permissions Gắn IAM permission policy sau vào tài khoản aws user của bạn để triển khai và dọn dẹp tài nguyên trong workshop này.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudformation:*\u0026#34;, \u0026#34;cloudwatch:*\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:AllocateAddress\u0026#34;, \u0026#34;ec2:AssociateAddress\u0026#34;, \u0026#34;ec2:AssociateIamInstanceProfile\u0026#34;, \u0026#34;ec2:AssociateRouteTable\u0026#34;, \u0026#34;ec2:AssociateSubnetCidrBlock\u0026#34;, \u0026#34;ec2:AssociateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:AssociateVpcCidrBlock\u0026#34;, \u0026#34;ec2:AttachInternetGateway\u0026#34;, \u0026#34;ec2:AttachNetworkInterface\u0026#34;, \u0026#34;ec2:AttachVolume\u0026#34;, \u0026#34;ec2:AttachVpnGateway\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:CreateClientVpnEndpoint\u0026#34;, \u0026#34;ec2:CreateClientVpnRoute\u0026#34;, \u0026#34;ec2:CreateCustomerGateway\u0026#34;, \u0026#34;ec2:CreateDhcpOptions\u0026#34;, \u0026#34;ec2:CreateFlowLogs\u0026#34;, \u0026#34;ec2:CreateInternetGateway\u0026#34;, \u0026#34;ec2:CreateLaunchTemplate\u0026#34;, \u0026#34;ec2:CreateNetworkAcl\u0026#34;, \u0026#34;ec2:CreateNetworkInterface\u0026#34;, \u0026#34;ec2:CreateNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:CreateRoute\u0026#34;, \u0026#34;ec2:CreateRouteTable\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:CreateSubnet\u0026#34;, \u0026#34;ec2:CreateSubnetCidrReservation\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34;, \u0026#34;ec2:CreateTransitGateway\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRoute\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:CreateTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:CreateVpc\u0026#34;, \u0026#34;ec2:CreateVpcEndpoint\u0026#34;, \u0026#34;ec2:CreateVpcEndpointConnectionNotification\u0026#34;, \u0026#34;ec2:CreateVpcEndpointServiceConfiguration\u0026#34;, \u0026#34;ec2:CreateVpnConnection\u0026#34;, \u0026#34;ec2:CreateVpnConnectionRoute\u0026#34;, \u0026#34;ec2:CreateVpnGateway\u0026#34;, \u0026#34;ec2:DeleteCustomerGateway\u0026#34;, \u0026#34;ec2:DeleteFlowLogs\u0026#34;, \u0026#34;ec2:DeleteInternetGateway\u0026#34;, \u0026#34;ec2:DeleteNetworkInterface\u0026#34;, \u0026#34;ec2:DeleteNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:DeleteRoute\u0026#34;, \u0026#34;ec2:DeleteRouteTable\u0026#34;, \u0026#34;ec2:DeleteSecurityGroup\u0026#34;, \u0026#34;ec2:DeleteSubnet\u0026#34;, \u0026#34;ec2:DeleteSubnetCidrReservation\u0026#34;, \u0026#34;ec2:DeleteTags\u0026#34;, \u0026#34;ec2:DeleteTransitGateway\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRoute\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:DeleteVpc\u0026#34;, \u0026#34;ec2:DeleteVpcEndpoints\u0026#34;, \u0026#34;ec2:DeleteVpcEndpointServiceConfigurations\u0026#34;, \u0026#34;ec2:DeleteVpnConnection\u0026#34;, \u0026#34;ec2:DeleteVpnConnectionRoute\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:DetachInternetGateway\u0026#34;, \u0026#34;ec2:DisassociateAddress\u0026#34;, \u0026#34;ec2:DisassociateRouteTable\u0026#34;, \u0026#34;ec2:GetLaunchTemplateData\u0026#34;, \u0026#34;ec2:GetTransitGatewayAttachmentPropagations\u0026#34;, \u0026#34;ec2:ModifyInstanceAttribute\u0026#34;, \u0026#34;ec2:ModifySecurityGroupRules\u0026#34;, \u0026#34;ec2:ModifyTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:ModifyVpcAttribute\u0026#34;, \u0026#34;ec2:ModifyVpcEndpoint\u0026#34;, \u0026#34;ec2:ReleaseAddress\u0026#34;, \u0026#34;ec2:ReplaceRoute\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:RunInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsEgress\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsIngress\u0026#34;, \u0026#34;iam:AddRoleToInstanceProfile\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:CreateInstanceProfile\u0026#34;, \u0026#34;iam:CreatePolicy\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteInstanceProfile\u0026#34;, \u0026#34;iam:DeletePolicy\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:DetachRolePolicy\u0026#34;, \u0026#34;iam:GetInstanceProfile\u0026#34;, \u0026#34;iam:GetPolicy\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListPolicyVersions\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;lambda:CreateFunction\u0026#34;, \u0026#34;lambda:DeleteFunction\u0026#34;, \u0026#34;lambda:DeleteLayerVersion\u0026#34;, \u0026#34;lambda:GetFunction\u0026#34;, \u0026#34;lambda:GetLayerVersion\u0026#34;, \u0026#34;lambda:InvokeFunction\u0026#34;, \u0026#34;lambda:PublishLayerVersion\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:DeleteLogGroup\u0026#34;, \u0026#34;logs:DescribeLogGroups\u0026#34;, \u0026#34;logs:PutRetentionPolicy\u0026#34;, \u0026#34;route53:ChangeTagsForResource\u0026#34;, \u0026#34;route53:CreateHealthCheck\u0026#34;, \u0026#34;route53:CreateHostedZone\u0026#34;, \u0026#34;route53:CreateTrafficPolicy\u0026#34;, \u0026#34;route53:DeleteHostedZone\u0026#34;, \u0026#34;route53:DisassociateVPCFromHostedZone\u0026#34;, \u0026#34;route53:GetHostedZone\u0026#34;, \u0026#34;route53:ListHostedZones\u0026#34;, \u0026#34;route53domains:ListDomains\u0026#34;, \u0026#34;route53domains:ListOperations\u0026#34;, \u0026#34;route53domains:ListTagsForDomain\u0026#34;, \u0026#34;route53resolver:AssociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:AssociateResolverRule\u0026#34;, \u0026#34;route53resolver:CreateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:CreateResolverRule\u0026#34;, \u0026#34;route53resolver:DeleteResolverEndpoint\u0026#34;, \u0026#34;route53resolver:DeleteResolverRule\u0026#34;, \u0026#34;route53resolver:DisassociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:DisassociateResolverRule\u0026#34;, \u0026#34;route53resolver:GetResolverEndpoint\u0026#34;, \u0026#34;route53resolver:GetResolverRule\u0026#34;, \u0026#34;route53resolver:ListResolverEndpointIpAddresses\u0026#34;, \u0026#34;route53resolver:ListResolverEndpoints\u0026#34;, \u0026#34;route53resolver:ListResolverRuleAssociations\u0026#34;, \u0026#34;route53resolver:ListResolverRules\u0026#34;, \u0026#34;route53resolver:ListTagsForResource\u0026#34;, \u0026#34;route53resolver:UpdateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:UpdateResolverRule\u0026#34;, \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:CreateBucket\u0026#34;, \u0026#34;s3:DeleteBucket\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:GetAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:GetBucketAcl\u0026#34;, \u0026#34;s3:GetBucketOwnershipControls\u0026#34;, \u0026#34;s3:GetBucketPolicy\u0026#34;, \u0026#34;s3:GetBucketPolicyStatus\u0026#34;, \u0026#34;s3:GetBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:GetObjectVersion\u0026#34;, \u0026#34;s3:GetBucketVersioning\u0026#34;, \u0026#34;s3:ListAccessPoints\u0026#34;, \u0026#34;s3:ListAccessPointsForObjectLambda\u0026#34;, \u0026#34;s3:ListAllMyBuckets\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:ListBucketVersions\u0026#34;, \u0026#34;s3:ListJobs\u0026#34;, \u0026#34;s3:ListMultipartUploadParts\u0026#34;, \u0026#34;s3:ListMultiRegionAccessPoints\u0026#34;, \u0026#34;s3:ListStorageLensConfigurations\u0026#34;, \u0026#34;s3:PutAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:PutBucketAcl\u0026#34;, \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;s3:PutBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;secretsmanager:CreateSecret\u0026#34;, \u0026#34;secretsmanager:DeleteSecret\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;secretsmanager:ListSecrets\u0026#34;, \u0026#34;secretsmanager:ListSecretVersionIds\u0026#34;, \u0026#34;secretsmanager:PutResourcePolicy\u0026#34;, \u0026#34;secretsmanager:TagResource\u0026#34;, \u0026#34;secretsmanager:UpdateSecret\u0026#34;, \u0026#34;sns:ListTopics\u0026#34;, \u0026#34;ssm:DescribeInstanceProperties\u0026#34;, \u0026#34;ssm:DescribeSessions\u0026#34;, \u0026#34;ssm:GetConnectionStatus\u0026#34;, \u0026#34;ssm:GetParameters\u0026#34;, \u0026#34;ssm:ListAssociations\u0026#34;, \u0026#34;ssm:ResumeSession\u0026#34;, \u0026#34;ssm:StartSession\u0026#34;, \u0026#34;ssm:TerminateSession\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Khởi tạo tài nguyên bằng CloudFormation Trong lab này, chúng ta sẽ dùng N.Virginia region (us-east-1).\nĐể chuẩn bị cho môi trường làm workshop, chúng ta deploy CloudFormation template sau (click link): PrivateLinkWorkshop . Để nguyên các lựa chọn mặc định.\nLựa chọn 2 mục acknowledgement Chọn Create stack Quá trình triển khai CloudFormation cần khoảng 15 phút để hoàn thành.\n2 VPCs đã được tạo 3 EC2s đã được tạo "
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.3-s3-vpc/5.3.2-test-gwe/",
	"title": "Kiểm tra Gateway Endpoint",
	"tags": [],
	"description": "",
	"content": "Tạo S3 bucket Đi đến S3 management console Trong Bucket console, chọn Create bucket Trong Create bucket console Đặt tên bucket: chọn 1 tên mà không bị trùng trong phạm vi toàn cầu (gợi ý: lab\u0026lt;số-lab\u0026gt;\u0026lt;tên-bạn\u0026gt;) Giữ nguyên giá trị của các fields khác (default) Kéo chuột xuống và chọn Create bucket Tạo thành công S3 bucket Kết nối với EC2 bằng session manager Trong workshop này, bạn sẽ dùng AWS Session Manager để kết nối đến các EC2 instances. Session Manager là 1 tính năng trong dịch vụ Systems Manager được quản lý hoàn toàn bởi AWS. System manager cho phép bạn quản lý Amazon EC2 instances và các máy ảo on-premises (VMs)thông qua 1 browser-based shell. Session Manager cung cấp khả năng quản lý phiên bản an toàn và có thể kiểm tra mà không cần mở cổng vào, duy trì máy chủ bastion host hoặc quản lý khóa SSH.\nFirst cloud journey Lab để hiểu sâu hơn về Session manager.\nTrong AWS Management Console, gõ Systems Manager trong ô tìm kiếm và nhấn Enter: Từ Systems Manager menu, tìm Node Management ở thanh bên trái và chọn Session Manager: Click Start Session, và chọn EC2 instance tên Test-Gateway-Endpoint. Phiên bản EC2 này đã chạy trong \u0026ldquo;VPC cloud\u0026rdquo; và sẽ được dùng để kiểm tra khả năng kết nối với Amazon S3 thông qua điểm cuối Cổng mà bạn vừa tạo (s3-gwe).\nSession Manager sẽ mở browser tab mới với shell prompt: sh-4.2 $\nBạn đã bắt đầu phiên kết nối đến EC2 trong VPC Cloud thành công. Trong bước tiếp theo, chúng ta sẽ tạo một S3 bucket và một tệp trong đó.\nCreate a file and upload to s3 bucket Đổi về ssm-user\u0026rsquo;s thư mục bằng lệnh \u0026ldquo;cd ~\u0026rdquo; Tạo 1 file để kiểm tra bằng lệnh \u0026ldquo;fallocate -l 1G testfile.xyz\u0026rdquo;, 1 file tên \u0026ldquo;testfile.xyz\u0026rdquo; có kích thước 1GB sẽ được tạo. Tải file mình vừa tạo lên S3 với lệnh \u0026ldquo;aws s3 cp testfile.xyz s3://your-bucket-name\u0026rdquo;. Thay your-bucket-name bằng tên S3 bạn đã tạo. Bạn đã tải thành công tệp lên bộ chứa S3 của mình. Bây giờ bạn có thể kết thúc session.\nKiểm tra object trong S3 bucket Đi đến S3 console. Click tên s3 bucket của bạn Trong Bucket console, bạn sẽ thấy tệp bạn đã tải lên S3 bucket của mình Tóm tắt Chúc mừng bạn đã hoàn thành truy cập S3 từ VPC. Trong phần này, bạn đã tạo gateway endpoint cho Amazon S3 và sử dụng AWS CLI để tải file lên. Quá trình tải lên hoạt động vì gateway endpoint cho phép giao tiếp với S3 mà không cần Internet gateway gắn vào \u0026ldquo;VPC Cloud\u0026rdquo;. Điều này thể hiện chức năng của gateway endpoint như một đường dẫn an toàn đến S3 mà không cần đi qua pub lic Internet.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.4-s3-onprem/5.4.2-create-interface-enpoint/",
	"title": "Tạo một S3 Interface endpoint",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo và kiểm tra Interface Endpoint S3 bằng cách sử dụng môi trường truyền thống mô phỏng.\nQuay lại Amazon VPC menu. Trong thanh điều hướng bên trái, chọn Endpoints, sau đó click Create Endpoint.\nTrong Create endpoint console:\nĐặt tên interface endpoint Trong Service category, chọn aws services Trong Search box, gõ S3 và nhấn Enter. Chọn endpoint có tên com.amazonaws.us-east-1.s3. Đảm bảo rằng cột Type có giá trị Interface. Đối với VPC, chọn VPC Cloud từ drop-down. Đảm bảo rằng bạn chọn \u0026ldquo;VPC Cloud\u0026rdquo; và không phải \u0026ldquo;VPC On-prem\u0026rdquo;\nMở rộng Additional settings và đảm bảo rằng Enable DNS name không được chọn (sẽ sử dụng điều này trong phần tiếp theo của workshop) Chọn 2 subnets trong AZs sau: us-east-1a and us-east-1b Đối với Security group, chọn SGforS3Endpoint: Giữ default policy - full access và click Create endpoint Chúc mừng bạn đã tạo thành công S3 interface endpoint. Ở bước tiếp theo, chúng ta sẽ kiểm tra interface endpoint.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/3-blogstranslated/",
	"title": "Các bài blogs đã dịch",
	"tags": [],
	"description": "",
	"content": "Blog tôi đã dịch:\nBlog 1 - Cách chúng tôi xây dựng một \u0026ldquo;flywheel\u0026rdquo; để cải thiện bảo mật liên tục cho Amazon RDS Blog này mô tả quy trình mà một nhóm bảo mật AWS đã thực hiện để bảo vệ một tính năng mới, PL/Rust, trên Amazon Relational Database Service (Amazon RDS). Tác giả (principal security engineer) giải thích cách nhóm vượt ra ngoài triển khai tối thiểu để xây dựng một hệ thống bảo mật toàn diện, tự cải thiện – một \u0026ldquo;flywheel\u0026rdquo; – kết hợp công nghệ, quy trình và kiểm thử nhằm bảo vệ khách hàng.\nBlog 2 - Tạo kết nối SSL tới Amazon RDS for Db2 trong Java không cần KeyStore hoặc Keytool Blog này trình bày một phương pháp đơn giản hóa để thiết lập kết nối cơ sở dữ liệu bảo mật SSL trong Java dành cho Amazon Relational Database Service (Amazon RDS) for Db2. Cách tiếp cận này cho phép developer bỏ qua độ phức tạp truyền thống liên quan tới tiện ích keytool và việc quản lý Java KeyStore (JKS). Lợi ích chính: đơn giản, phù hợp môi trường tự động hóa như CI/CD pipelines, và vẫn duy trì bảo mật mạnh thông qua thương lượng TLS 1.2 đúng chuẩn và xác thực chứng chỉ máy chủ.\nBlog 3 - Nâng cao trải nghiệm kiểm thử cục bộ cho các ứng dụng serverless với LocalStack Blog này giới thiệu và giải thích các khả năng mới được thiết kế để đơn giản hóa trải nghiệm kiểm thử cục bộ cho ứng dụng serverless. Thông qua tích hợp với AWS Partner, LocalStack, AWS Toolkit for Visual Studio Code nay cung cấp một cách tinh gọn hơn để developer build, test và debug ứng dụng serverless mà không phải rời môi trường phát triển.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.4-s3-onprem/5.4.3-test-endpoint/",
	"title": "Kiểm tra Interface Endpoint",
	"tags": [],
	"description": "",
	"content": "Lấy regional DNS name (tên DNS khu vực) của S3 interface endpoint Trong Amazon VPC menu, chọn Endpoints.\nClick tên của endpoint chúng ta mới tạo ở mục 4.2: s3-interface-endpoint. Click details và lưu lại regional DNS name của endpoint (cái đầu tiên) vào text-editor của bạn để dùng ở các bước sau.\nKết nối đến EC2 instance ở trong \u0026ldquo;VPC On-prem\u0026rdquo; (giả lập môi trường truyền thống) Đi đến Session manager bằng cách gõ \u0026ldquo;session manager\u0026rdquo; vào ô tìm kiếm\nClick Start Session, chọn EC2 instance có tên Test-Interface-Endpoint. EC2 instance này đang chạy trên \u0026ldquo;VPC On-prem\u0026rdquo; và sẽ được sử dụng để kiểm tra kết nối đến Amazon S3 thông qua Interface endpoint. Session Manager sẽ mở 1 browser tab mới với shell prompt: sh-4.2 $\nĐi đến ssm-user\u0026rsquo;s home directory với lệnh \u0026ldquo;cd ~\u0026rdquo;\nTạo 1 file tên testfile2.xyz\nfallocate -l 1G testfile2.xyz Copy file vào S3 bucket mình tạo ở section 4.2 aws s3 cp --endpoint-url https://bucket.\u0026lt;Regional-DNS-Name\u0026gt; testfile2.xyz s3://\u0026lt;your-bucket-name\u0026gt; Câu lệnh này yêu cầu thông số \u0026ndash;endpoint-url, bởi vì bạn cần sử dụng DNS name chỉ định cho endpoint để truy cập vào S3 thông qua Interface endpoint. Không lấy \u0026rsquo; * \u0026rsquo; khi copy/paste tên DNS khu vực. Cung cấp tên S3 bucket của bạn Bây giờ tệp đã được thêm vào bộ chứa S3 của bạn. Hãy kiểm tra bộ chứa S3 của bạn trong bước tiếp theo.\nKiểm tra Object trong S3 bucket Đi đến S3 console Click Buckets Click tên bucket của bạn và bạn sẽ thấy testfile2.xyz đã được thêm vào s3 bucket của bạn "
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.3-s3-vpc/",
	"title": "Truy cập S3 từ VPC",
	"tags": [],
	"description": "",
	"content": "Sử dụng Gateway endpoint Trong phần này, bạn sẽ tạo một Gateway endpoint để truy cập Amazon S3 từ một EC2 instance. Gateway endpoint sẽ cho phép tải một object lên S3 bucket mà không cần sử dụng Internet Công cộng. Để tạo endpoint, bạn phải chỉ định VPC mà bạn muốn tạo endpoint và dịch vụ (trong trường hợp này là S3) mà bạn muốn thiết lập kết nối.\nNội dung Tạo gateway endpoint Test gateway endpoint "
},
{
	"uri": "http://localhost:1313/internship_report/vi/4-eventparticipated/",
	"title": "Các events đã tham gia",
	"tags": [],
	"description": "",
	"content": "Trong quá trình thực tập, em đã tham gia [x] events, với mỗi event là một trải nghiệm đáng nhớ với những kiến thức mới, hay và bổ ích, cùng với đó là nhứng món quà và những khoảnh khắc rất tuyệt vời.\nKick-off Event Name: Kick-off AWS FCJ Workforce - FPTU OJT FALL 2025\nThời gian: 08:30 ngày 06/09/2025\nĐịa điểm: Tầng 26, tòa nhà Bitexco, số 02 đường Hải Triều, phường Sài Gòn, thành phố Hồ Chí Minh\nVai trò trong sự kiện: Người tham dự\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.4-s3-onprem/5.4.4-dns-simulation/",
	"title": "Mô phỏng On-premises DNS ",
	"tags": [],
	"description": "",
	"content": "AWS PrivateLink endpoint có một địa chỉ IP cố định trong từng AZ nơi chúng được triển khai, trong suốt thời gian tồn tại của endpoint (cho đến khi endpoint bị xóa). Các địa chỉ IP này được gắn vào Elastic network interface (ENI). AWS khuyến nghị sử dụng DNS để resolve địa chỉ IP cho endpoint để các ứng dụng downstream sử dụng địa chỉ IP mới nhất khi ENIs được thêm vào AZ mới hoặc bị xóa theo thời gian.\nTrong phần này, bạn sẽ tạo một quy tắc chuyển tiếp (forwarding rule) để gửi các yêu cầu resolve DNS từ môi trường truyền thống (mô phỏng) đến Private Hosted Zone trên Route 53. Phần này tận dụng cơ sở hạ tầng do CloudFormation triển khai trong phần Chuẩn bị môi trường.\nTạo DNS Alias Records cho Interface endpoint Click link để đi đến Route 53 management console (Hosted Zones section). Mẫu CloudFormation mà bạn triển khai trong phần Chuẩn bị môi trường đã tạo Private Hosted Zone này. Nhấp vào tên của Private Hosted Zone, s3.us-east-1.amazonaws.com: Tạo 1 record mới trong Private Hosted Zone: Giữ nguyên Record name và record type Alias Button: click để enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Chọn endpoint: Paste tên (Regional VPC Endpoint DNS) bạn đã lưu lại ở phần 4.3 Click Add another record, và add 1 cái record thứ 2 sử dụng những thông số sau: Record name: *. Record type: giữ giá trị default (type A) Alias Button: Click để enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Chọn endpoint: Paste tên (Regional VPC Endpoint DNS) bạn đã lưu lại ở phần 4.3 Click Create records Record mới xuất hiện trên giao diện Route 53.\nTạo một Resolver Forwarding Rule Route 53 Resolver Forwarding Rules cho phép bạn chuyển tiếp các DNS queries từ VPC của bạn đến các nguồn khác để resolve name. Bên ngoài môi trường workshop, bạn có thể sử dụng tính năng này để chuyển tiếp các DNS queries từ VPC của bạn đến các máy chủ DNS chạy trên on-premises. Trong phần này, bạn sẽ mô phỏng một on-premises conditional forwarder bằng cách tạo một forwarding rule để chuyển tiếp các DNS queries for Amazon S3 đến một Private Hosted Zone chạy trong \u0026ldquo;VPC Cloud\u0026rdquo; để resolve PrivateLink interface endpoint regional DNS name.\nTừ giao diện Route 53, chọn Inbound endpoints trên thanh bên trái\nTrong giao diện Inbound endpoint, Chọn ID của Inbound endpoint.\nSao chép 2 địa chỉ IP trong danh sách vào trình chỉnh sửa. Từ giao diện Route 53, chọn Resolver \u0026gt; Rules và chọn Create rule Trong giao diện Create rule Name: myS3Rule Rule type: Forward Domain name: s3.us-east-1.amazonaws.com VPC: VPC On-prem Outbound endpoint: VPCOnpremOutboundEndpoint Target IP Addresses: điền cả hai IP bạn đã lưu trữ trên trình soạn thảo (inbound endpoint addresses) và sau đó chọn Submit Bạn đã tạo thành công resolver forwarding rule.\nKiểm tra on-premises DNS mô phỏng. Kết nối đến Test-Interface-Endpoint EC2 instance với Session Manager Kiểm tra DNS resolution. Lệnh dig sẽ trả về địa chỉ IP được gán cho VPC endpoint interface đang chạy trên VPC (địa chỉ IP của bạn sẽ khác): dig +short s3.us-east-1.amazonaws.com Các địa chỉ IP được trả về là các địa chỉ IP VPC enpoint, KHÔNG phải là các địa chỉ IP Resolver mà bạn đã dán từ trình chỉnh sửa văn bản của mình. Các địa chỉ IP của Resolver endpoint và VPC endpoin trông giống nhau vì chúng đều từ khối CIDR VPC Cloud.\nTruy cập vào menu VPC (phần Endpoints), chọn S3 interface endpoint. Nhấp vào tab Subnets và xác nhận rằng các địa chỉ IP được trả về bởi lệnh Dig khớp với VPC endpoint: Hãy quay lại shell của bạn và sử dụng AWS CLI để kiểm tra danh sách các bucket S3 của bạn: aws s3 ls --endpoint-url https://s3.us-east-1.amazonaws.com Kết thúc phiên làm việc của Session Manager của bạn: Trong phần này, bạn đã tạo một Interface Endpoint cho Amazon S3. Điểm cuối này có thể được truy cập từ on-premises thông qua Site-to-Site VPN hoặc AWS Direct Connect. Các điểm cuối Route 53 Resolver outbound giả lập chuyển tiếp các yêu cầu DNS từ on-premises đến một Private Hosted Zone đang chạy trên đám mây. Các điểm cuối Route 53 inbound nhận yêu cầu giải quyết và trả về một phản hồi chứa địa chỉ IP của Interface Endpoint VPC. Sử dụng DNS để giải quyết các địa chỉ IP của điểm cuối cung cấp tính sẵn sàng cao trong trường hợp một Availability Zone gặp sự cố.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.4-s3-onprem/",
	"title": "Truy cập S3 từ môi trường truyền thống",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong phần này, bạn sẽ tạo một Interface Endpoint để truy cập Amazon S3 từ môi trường truyền thống mô phỏng. Interface Endpoint sẽ cho phép bạn định tuyến đến Amazon S3 qua kết nối VPN từ môi trường truyền thống mô phỏng của bạn.\nTại sao nên sử dụng Interface Endpoint:\nCác Gateway endpoints chỉ hoạt động với các tài nguyên đang chạy trong VPC nơi chúng được tạo. Interface Endpoint hoạt động với tài nguyên chạy trong VPC và cả tài nguyên chạy trong môi trường truyền thống. Khả năng kết nối từ môi trường truyền thống của bạn với aws cloud có thể được cung cấp bởi AWS Site-to-Site VPN hoặc AWS Direct Connect. Interface Endpoint cho phép bạn kết nối với các dịch vụ do AWS PrivateLink cung cấp. Các dịch vụ này bao gồm một số dịch vụ AWS, dịch vụ do các đối tác và khách hàng AWS lưu trữ trong VPC của riêng họ (gọi tắt là Dịch vụ PrivateLink endpoints) và các dịch vụ Đối tác AWS Marketplace. Đối với workshop này, chúng ta sẽ tập trung vào việc kết nối với Amazon S3. "
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.5-policy/",
	"title": "VPC Endpoint Policies",
	"tags": [],
	"description": "",
	"content": "Khi bạn tạo một Interface Endpoint hoặc cổng, bạn có thể đính kèm một chính sách điểm cuối để kiểm soát quyền truy cập vào dịch vụ mà bạn đang kết nối. Chính sách VPC Endpoint là chính sách tài nguyên IAM mà bạn đính kèm vào điểm cuối. Nếu bạn không đính kèm chính sách khi tạo điểm cuối, thì AWS sẽ đính kèm chính sách mặc định cho bạn để cho phép toàn quyền truy cập vào dịch vụ thông qua điểm cuối.\nBạn có thể tạo chính sách chỉ hạn chế quyền truy cập vào các S3 bucket cụ thể. Điều này hữu ích nếu bạn chỉ muốn một số Bộ chứa S3 nhất định có thể truy cập được thông qua điểm cuối.\nTrong phần này, bạn sẽ tạo chính sách VPC Endpoint hạn chế quyền truy cập vào S3 bucket được chỉ định trong chính sách VPC Endpoint.\nKết nối tới EC2 và xác minh kết nối tới S3. Bắt đầu một phiên AWS Session Manager mới trên máy chủ có tên là Test-Gateway-Endpoint. Từ phiên này, xác minh rằng bạn có thể liệt kê nội dung của bucket mà bạn đã tạo trong Phần 1: Truy cập S3 từ VPC. aws s3 ls s3://\u0026lt;your-bucket-name\u0026gt; Nội dung của bucket bao gồm hai tệp có dung lượng 1GB đã được tải lên trước đó.\nTạo một bucket S3 mới; tuân thủ mẫu đặt tên mà bạn đã sử dụng trong Phần 1, nhưng thêm \u0026lsquo;-2\u0026rsquo; vào tên. Để các trường khác là mặc định và nhấp vào Create. Tạo bucket thành công. Policy mặc định cho phép truy cập vào tất cả các S3 Buckets thông qua VPC endpoint.\nTrong giao diện Edit Policy, sao chép và dán theo policy sau, thay thế yourbucketname-2 với tên bucket thứ hai của bạn. Policy này sẽ cho phép truy cập đến bucket mới thông qua VPC endpoint, nhưng không cho phép truy cập đến các bucket còn lại. Chọn Save để kích hoạt policy. { \u0026#34;Id\u0026#34;: \u0026#34;Policy1631305502445\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Stmt1631305501021\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::yourbucketname-2\u0026#34;, \u0026#34;arn:aws:s3:::yourbucketname-2/*\u0026#34; ], \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34; } ] } Cấu hình policy thành công.\nTừ session của bạn trên Test-Gateway-Endpoint instance, kiểm tra truy cập đến S3 bucket bạn tạo ở bước đầu aws s3 ls s3://\u0026lt;yourbucketname\u0026gt; Câu lệnh trả về lỗi bởi vì truy cập vào S3 bucket không có quyền trong VPC endpoint policy.\nTrở lại home directory của bạn trên EC2 instance cd~ Tạo file fallocate -l 1G test-bucket2.xyz Sao chép file lên bucket thứ 2 aws s3 cp test-bucket2.xyz s3://\u0026lt;your-2nd-bucket-name\u0026gt; Thao tác này được cho phép bởi VPC endpoint policy.\nSau đó chúng ta kiểm tra truy cập vào S3 bucket đầu tiên\naws s3 cp test-bucket2.xyz s3://\u0026lt;your-1st-bucket-name\u0026gt;\nCâu lệnh xảy ra lỗi bởi vì bucket không có quyền truy cập bởi VPC endpoint policy.\nTrong phần này, bạn đã tạo chính sách VPC Endpoint cho Amazon S3 và sử dụng AWS CLI để kiểm tra chính sách. Các hoạt động AWS CLI liên quan đến bucket S3 ban đầu của bạn thất bại vì bạn áp dụng một chính sách chỉ cho phép truy cập đến bucket thứ hai mà bạn đã tạo. Các hoạt động AWS CLI nhắm vào bucket thứ hai của bạn thành công vì chính sách cho phép chúng. Những chính sách này có thể hữu ích trong các tình huống khi bạn cần kiểm soát quyền truy cập vào tài nguyên thông qua VPC Endpoint.\n"
},
{
	"uri": "http://localhost:1313/internship_report/vi/5-workshop/5.6-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Xin chúc mừng bạn đã hoàn thành xong lab này! Trong lab này, bạn đã học về các mô hình kiến trúc để truy cập Amazon S3 mà không sử dụng Public Internet.\nBằng cách tạo Gateway endpoint, bạn đã cho phép giao tiếp trực tiếp giữa các tài nguyên EC2 và Amazon S3, mà không đi qua Internet Gateway. Bằng cách tạo Interface endpoint, bạn đã mở rộng kết nối S3 đến các tài nguyên chạy trên trung tâm dữ liệu trên chỗ của bạn thông qua AWS Site-to-Site VPN hoặc Direct Connect. Dọn dẹp Điều hướng đến Hosted Zones trên phía trái của bảng điều khiển Route 53. Nhấp vào tên của s3.us-east-1.amazonaws.com zone. Nhấp vào Delete và xác nhận việc xóa bằng cách nhập từ khóa \u0026ldquo;delete\u0026rdquo;. Disassociate Route 53 Resolver Rule - myS3Rule from \u0026ldquo;VPC Onprem\u0026rdquo; and Delete it. 4.Mở console của CloudFormation và xóa hai stack CloudFormation mà bạn đã tạo cho bài thực hành này:\nPLOnpremSetup PLCloudSetup Xóa các S3 bucket Mở bảng điều khiển S3 Chọn bucket chúng ta đã tạo cho lab, nhấp chuột và xác nhận là empty. Nhấp Delete và xác nhận delete. "
},
{
	"uri": "http://localhost:1313/internship_report/vi/",
	"title": "Báo cáo thực tập",
	"tags": [],
	"description": "",
	"content": "Báo cáo thực tập Thông tin sinh viên: Họ và tên: Lê Trí Dũng\nSố điện thoại: 0941423585\nEmail: tridungit2005@gmail.com\nTrường: Đại học FPT TP.HCM\nNgành: Khoa học dữ liệu\nMSSV: SE196261\nCông ty thực tập: Công ty TNHH Amazon Web Services Vietnam\nVị trí thực tập: FCJ Cloud Intern\nThời gian thực tập: Từ 09/2025 đến 02/2026\nNội dung báo cáo Worklog Proposal Các bài blogs đã dịch Các events đã tham gia Workshop Tự đánh giá Chia sẻ, đóng góp ý kiến "
},
{
	"uri": "http://localhost:1313/internship_report/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/internship_report/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]